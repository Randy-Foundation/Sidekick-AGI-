import random

class LanguageModel:
    """
    Basic language model for processing user input and generating responses.
    Can be expanded and updated by Sidekick itself over time.
    """

    def __init__(self):
        """Initialize the model with a simple set of predefined responses."""
        self.commands = {
            "greet": ["Hello!", "Hi there!", "Greetings!", "Hey!"],
            "status": ["I am functioning as expected.", "All systems operational."],
            "help": [
                "You can ask me to perform tasks, analyze data, or answer questions.",
                "I'm here to assist you with anything you need."
            ],
            "exit": ["Goodbye!", "See you later!", "Take care!"]
        }
        self.default_response = "I'm not sure how to respond to that. Could you clarify?"

    def process_input(self, user_input):
        """
        Process user input and generate a response.
        :param user_input: str - The input command or query from the user.
        :return: str - The response generated by the model.
        """
        user_input = user_input.lower()

        # Basic command recognition
        if "hello" in user_input or "hi" in user_input:
            return random.choice(self.commands["greet"])
        elif "status" in user_input:
            return random.choice(self.commands["status"])
        elif "help" in user_input:
            return random.choice(self.commands["help"])
        elif "exit" in user_input:
            return random.choice(self.commands["exit"])
        else:
            return self.default_response

    def learn_new_command(self, command, response):
        """
        Allow Sidekick to learn new commands and responses dynamically.
        :param command: str - The command keyword.
        :param response: str - The response to associate with the command.
        """
        if command in self.commands:
            self.commands[command].append(response)
        else:
            self.commands[command] = [response]
        return f"Learned new command '{command}' with response '{response}'."

# Example usage
if __name__ == "__main__":
    model = LanguageModel()
    print(model.process_input("Hello"))
    print(model.learn_new_command("inspire", "Keep pushing forward!"))
    print(model.process_input("inspire"))